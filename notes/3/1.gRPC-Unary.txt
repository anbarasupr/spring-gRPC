gRPC-Unary:
-------------

gRPC High Performance ?
--------------------------
	Works on protocol buffers which is faster than json
	Uses Http 2 as underlying transport to send and receive messages
	
Http 1.1:
-----------

	Http 1.1 was released in1997
	Text based protocol to send and receive messages
	TCP Connection - 3 way handshake process
		Significant amount of time is spent in establising a connect
	Serves as One request per Connection model
		For every request, it establishes new connections and the handshake happen
		Takes time in case of large no of concurrrent connections
		
		
		
Http 2:
----------
	Release on 2015 based on Google's SPDY
	Suuports Binary to send and receive messages
	Multiplexing - Multiple request per connections
	
	
Can we use Http2 for Rest:
	Yes. Spring webflux uses Http2 with netty server in Spring Applications
	gRPC has one advantage more than Rest, it has additional communication patterns
	
Webflux Rest uses Http 2 protocol as a underlying model.
gRPC is not tied to Http protocols. Even new protocols introduced, it can uses it as underlying model in future




gRPC: Client -> Server:
-----------------------
						     .proto
		Client Channel		-------->	Server
			 ↑							   ↓	
			Stub						Service	
			



Stub - Synchronous and Asynchronous:
------------------------------------
	Client calls to the server can be Sync/Asynchronous
		Sync -> blocking/waiting for the response
		Async	->	Register a listener for callback
		
	It is completely upto the client to choose above and also depends ont he RPC model
	
	Java 21 - Virtual Thread
		We can write sync / blocking style code but the Networks calls are non-blocking behind the scenes
		
	Use Virtual thread which is light weight instead of OS thread which is expensive
	


Streaming VS Unary:
------------------------------------

Streaming:
	Size - potentially large / unknown
		Huge file
		Send info in chunks
	Time Consuming - Periodic Updates
		Uber
		
	More efficient than multiple RPC calls - avaoid polling
	
Unary:
	More efficient than streaming RPC
	Size is not too big and not very time consuming



Trailer Metadata:
-----------------

Metadata = Headers
	Ex:	Content-Type: application/json (for grpc, it is application/grpc)
		Transfer-Encoding: Chunked
		
Metadata is sent in the initial response

Trailer
	Trailers are metadata sent by the server to the client at the end of RPC call
	They provide information about the status of RPC
	It can include additional details such as custom metadata or error information
	
	
Status:
		INVALID ARGUMENT
		FAILED PRECONDITION
		
Trailer:
		Custom Application Specific Status Code
	
	
	
Input validation / Error handling:
-----------------------------------	
Error Response:
		Status	with Description
		Status with Trailer

	
	Status:
		Success
			OK
		Failure	
			INVALID ARGUMENT
			FAILED PRECONDITION
			UNKNOWN
			INTERNAL
			
		We pass the Status as exception via onError
			We can add meaningfull description
			We can also attach custom message via trailers
				Client should also know how to access trailers from metadata
		After onError, we cannot expect any more response from the server for the request
		OneOf could be a better choice if we do not want to stop the streaming








gRPC- Deadline: Resilient Pattern:
----------------------------------------
	Client side timeout configuration for an RPC to complete
	Failfast


Wait for Ready:
---------------
	Client is willing to wait for server to be available
	This will not fail fast immediately and it will wait for server to be available
	
	

mobile version 
2 weeks


site type - 





